% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/OptimizerIrace.R
\name{mlr_optimizers_irace}
\alias{mlr_optimizers_irace}
\alias{OptimizerIrace}
\title{Optimization via Iterated Racing}
\source{
Lopez-Ibanez M, Dubois-Lacoste J, Caceres LP, Birattari M, Stuetzle T (2016).
\dQuote{The irace package: Iterated racing for automatic algorithm configuration.}
\emph{Operations Research Perspectives}, \bold{3}, 43--58.
\doi{https://doi.org/10.1016/j.orp.2016.09.002}.
}
\description{
\code{OptimizerIrace} class that implements iterated racing.
Calls \code{\link[irace:irace]{irace::irace()}} from package \CRANpkg{irace}.

#' @section Parameters:
\describe{
\item{\code{instances}}{\code{list()}\cr
A list of instances where the target algorithm is executed on.}
\item{\code{targetRunner}}{\verb{function()}\cr
A function that executes the target algorithm with a specific parameter configuration and instance.}
}
}
\section{TODO: Write example with instances passed to objective}{
For the meaning of all other parameters, see \code{\link[irace:defaultScenario]{irace::defaultScenario()}}.
Note that we have removed all control parameters which refer to the termination of
the algorithm. Use \link{TerminatorRunTime} or \link{TerminatorEvals} instead. Other
terminators do not work with \code{TunerIrace}. We substract 5 seconds from the
\link{TerminatorRunTime} budget for stability reasons.
}

\section{Dictionary}{

This \link{Optimizer} can be instantiated via the \link[mlr3misc:Dictionary]{dictionary}
\link{mlr_optimizers} or with the associated sugar function \code{\link[=opt]{opt()}}:\preformatted{mlr_optimizers$get("irace")
opt("irace")
}
}

\section{Progress Bars}{

\verb{$optimize()} supports progress bars via the package \CRANpkg{progressr}
combined with a \link{Terminator}. Simply wrap the function in
\code{progressr::with_progress()} to enable them. We recommend to use package
\CRANpkg{progress} as backend; enable with \code{progressr::handlers("progress")}.
}

\examples{
library(data.table)

search_space = domain = ps(
  x1 = p_dbl(-5, 10),
  x2 = p_dbl(0, 15)
)

ObjectiveIrace = R6Class("ObjectiveIrace", inherit = Objective,
  public = list(
    irace_instance = NULL
  ),

  private = list(
    .eval = function(xs) {
      # branin function with `tau` noise 
      a = 1
      b = 5.1 / (4 * (pi ^ 2))
      c = 5 / pi
      r = 6
      s = 10
      t = 1 / (8 * pi)
      tau = self$irace_instance

      list(y = a * ((xs$x2 -
      b * (xs$x1 ^ 2L) +
      c * xs$x1 - r) ^ 2) +
      ((s * (1 - t)) * cos(xs$x1)))
    }
  )
)

objective = ObjectiveIrace$new(domain = domain,  codomain = ps(y = p_dbl(tags = "minimize")))

instance = OptimInstanceSingleCrit$new(
  objective = objective,
  search_space = search_space,
  terminator = trm("evals", n_evals = 1000))

# create instances of branin function
irace_instance = rnorm(10, mean = 0, sd = 0.1)
optimizer = opt("irace", instances = irace_instance)

 # modifies the instance by reference
 optimizer$optimize(instance)

 # best scoring evaluation
 instance$result

 # all evaluations
 as.data.table(instance$archive)
}
\section{Super class}{
\code{\link[bbotk:Optimizer]{bbotk::Optimizer}} -> \code{OptimizerIrace}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{OptimizerIrace$new()}}
\item \href{#method-clone}{\code{OptimizerIrace$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="bbotk" data-topic="Optimizer" data-id="format">}\href{../../bbotk/html/Optimizer.html#method-format}{\code{bbotk::Optimizer$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="bbotk" data-topic="Optimizer" data-id="optimize">}\href{../../bbotk/html/Optimizer.html#method-optimize}{\code{bbotk::Optimizer$optimize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="bbotk" data-topic="Optimizer" data-id="print">}\href{../../bbotk/html/Optimizer.html#method-print}{\code{bbotk::Optimizer$print()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OptimizerIrace$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OptimizerIrace$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
